load("~/CCMQ/.RData")
# validate
lapply(names(df.score2)[-1], function(x) {
df.score2 %>% na.omit() %>% with(table(constitutionA, get(x)))
})
library(tidyverse)
library(readxl)
# validate
lapply(names(df.score2)[-1], function(x) {
df.score2 %>% na.omit() %>% with(table(constitutionA, get(x)))
})
View(df.score2)
load("~/yeos/YEOs_environment.RData")
View(fil_sig_log)
View(meta_clr)
View(meta_clr)
library (mixOmics)
data(multidrug)
View(multidrug)
View(multidrug)
multidrug[["ABC.trans"]]
library(ggfortify)
library(ggplot2)
library(ggplot2)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
df <- iris[1:4]
View(df)
View(df)
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
autoplot(pca_res, data = iris, colour = 'Species')
data <- iris
View(data)
View(pca_res)
library(vegan)
data(dune)
View(dune)
data
data
data(dune.enc)
data(dune.env)
View(dune.env)
dune.dist <- vegdist(dune, method - "bray")
dune.dist <- vegdist(dune, method = "bray")
dune.div <- adonis2(dune ~ Management*A1, data = dune.env, permutations = 999, method="bray")
adonis2(dune ~ Management*A1, data = dune.env, permutations = 999, method="bray")
adonis2(dune ~ Management*A1, data = dune.env, permutations = 999, method="bray")
res<-BH(Hedenfalk$x)
summary(res) #number of rejected nulls, estimated FDR
plot(res) #adjusted p-values
install.packages("sgof")
res<-BH(Hedenfalk$x)
summary(res) #number of rejected nulls, estimated FDR
plot(res) #adjusted p-values
library(sgof)
res<-BH(Hedenfalk$x)
summary(res) #number of rejected nulls, estimated FDR
plot(res) #adjusted p-values
Hedenfalk
P <- Hedenfalk
View(P)
BH(u, alpha = 0.05)
install.packages('datarium')
library(datarium)
data("genderweight", package = "datarium")
force(genderweight)
View(genderweight)
set.seed(123)
genderweight %>% sample_n_by(group, size = 2)
library(tidyverse)
library(ggpubr)
library(rstatix)
install.packages("ggpubr")
install.packages("rstatix", repos = "https://cloud.r-project.org")
library(ggpubr)
library(rstatix)
genderweight %>% sample_n_by(group, size = 2)
library(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages('devtools')
library(devtools
)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
data(iris)
pairwise.adonis(iris[,1:4],iris$Species)
View(iris)
data(wine)
X = wine[,4:21]
X=IniTransform(X)
D = DistContinuous (X)
perwine=PERMANOVA(D, wine$Group, CoordPrinc=TRUE)
plot(perwine)
install.packages("PERMANOVA")
data(wine)
X = wine[,4:21]
X=IniTransform(X)
D = DistContinuous (X)
perwine=PERMANOVA(D, wine$Group, CoordPrinc=TRUE)
plot(perwine)
library(PERMANOVA)
data(wine)
X = wine[,4:21]
X=IniTransform(X)
D = DistContinuous (X)
perwine=PERMANOVA(D, wine$Group, CoordPrinc=TRUE)
plot(perwine)
View(X)
View(wine)
View(D)
View(perwine)
install.packages("MASS")
install.packages("MASS")
library(MASS)
`2022.06.23_phyloseq_normalized` <- readRDS("~/Raw/2022.06.23_phyloseq_normalized.rds")
View(`2022.06.23_phyloseq_normalized`)
`2022.06.23_phyloseq_normalized`@tax_table
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEP")
library(DEP)
data <- UbiLength
data <- data[data$Reverse != "+" & data$Potential.contaminant != "+",]
data_unique <- make_unique(data, "Gene.names", "Protein.IDs", delim = ";")
# Make SummarizedExperiment
columns <- grep("LFQ.", colnames(data_unique))
exp_design <- UbiLength_ExpDesign
se <- make_se(data_unique, columns, exp_design)
# Filter, normalize and impute missing values
filt <- filter_missval(se, thr = 0)
norm <- normalize_vsn(filt)
imputed <- impute(norm, fun = "MinProb", q = 0.01)
# Test for differentially expressed proteins
diff <- test_diff(imputed, "control", "Ctrl")
dep <- add_rejections(diff, alpha = 0.05, lfc = 1)
# Plot heatmap
plot_heatmap(dep)
View(dep)
library(phyloseq)
library("phyloseq")
filepath = system.file("extdata", "study_1457_split_library_seqs_and_mapping.zip", package="phyloseq")
kostic = microbio_me_qiime(filepath)
kostic = microbio_me_qiime(1457)
devtools::install_github('schuyler-smith/phylosmith')
devtools::install_github('schuyler-smith/phylosmith')
library(phylosmith)
library(phylosmith)
library("phylosmith")
load("~/shiangchiet/CCMQ16S_KY/CCMQ16S_KY.RData")
psall <- readRDS("~/2022.06.23_phyloseq_raw.rds")
sample <- read.csv("sample_name.csv", row.names = 1, header = TRUE)
#replace ASV sequence withASV1, ASV2...
taxa_names(psall) <- paste0("ASV", seq(ntaxa(psall)))
filter <- genefilter_sample(psall, filterfun_sample(function(x) x >= 0.001), A=0.05*nsamples(psall)) #Yuzie method
library(phyloseq)
library(vegan)
#replace ASV sequence withASV1, ASV2...
taxa_names(psall) <- paste0("ASV", seq(ntaxa(psall)))
filter <- genefilter_sample(psall, filterfun_sample(function(x) x >= 0.001), A=0.05*nsamples(psall)) #Yuzie method
ps = filter_taxa(psall, function(x) mean(x) > 1e-5, TRUE)
ps = filter_taxa(psall, function(x) mean(x) > 0.001, TRUE)
ps = filter_taxa(psall, function(x) mean(x) > 0.01, TRUE)
filter <- genefilter_sample(psall, filterfun_sample(function(x) x >= 30), A=0.05*nsamples(psall)) #Yuzie method
ps = filter_taxa(psall, function(x) mean(x) > 30, TRUE)
ps = filter_taxa(psall, function(x) mean(x) > 50, TRUE)
ps = filter_taxa(psall, function(x) mean(x) > 50, TRUE)
ps = filter_taxa(psall, function(x) mean(x) > 30, TRUE)
ps = filter_taxa(psall, function(x) mean(x) > 30, TRUE)
ps1 <- prune_taxa(genefilter_sample(psall, filterfun_sample(function(x) x >= 30), A=0.05*nsamples(psall), psall)
)
ps1 <- prune_taxa((genefilter_sample(psall, filterfun_sample(function(x) x >= 30), A=0.05*nsamples(psall))), psall)
ps = filter_taxa(psall, function(x) mean(x) > 30, TRUE)
rm(sample)
rm(psall)
save.image("~/ps16s.RData")
library(tidyverse)
n_row <- 30
n_col <- 10
# a mtrix with random numbers
dat <- matrix(rnorm(n_row*n_col),ncol=n_col)
dim(dat)
colnames(dat) <- paste0("S",seq(1,n_col))
rownames(dat) <- paste0("f",seq(1,n_row))
View(dat)
dat[,1:(n_col/2)] <- matrix(rnorm(n_row*n_col/2,mean=50,sd=5),ncol=n_col/2)
dat[,((n_col/2)+1):n_col] <- matrix(rnorm(n_row*n_col/2,mean=70,sd=5),n_col/2)
dat %>%
as.data.frame() %>%
rownames_to_column("f_id") %>%
pivot_longer(-c(f_id), names_to = "samples", values_to = "counts")
dat %>%
as.data.frame() %>%
rownames_to_column("f_id") %>%
pivot_longer(-c(f_id), names_to = "samples", values_to = "counts") %>%
ggplot(aes(x=samples, y=f_id, fill=counts)) +
geom_raster() +
scale_fill_viridis_c()
pak::pkg_install("r-lib/rlang")
install.packages("rlang")
install.packages("cli")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
sessionInfo()
install.packages("tidyverse")
library(ggplot2)
install.packages("ggsignif")
install.packages("gridExtra")
library(dplyr)
libraryBiocManager::install("ANCOMBC")
BiocManager::install("ANCOMBC")
library(ANCOMBC)
BiocManager::install("Maaslin2")
install.packages("remotes")
remotes::install_github("vegandevs/vegan")
library(vegan)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Maaslin2")
library(Maaslin1)
library(Maaslin2)
install.packages("DeSEq2")
install.packages("devtools")
pseq <- makePhyloseqFromTreeSummarizedExperiment(tse)
BiocManager::install("mia")
library(mia)
library(ANCOMBC)
pseq <- makePhyloseqFromTreeSummarizedExperiment(tse)
data(atlas1006)
View(atlas1006)
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
tse = atlas1006[, atlas1006$time == 0]
View(tse)
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
# Subset to lean, overweight, and obese subjects
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
# Note that by default, levels of a categorical variable in R are sorted
# alphabetically. In this case, the reference level for `bmi` will be
# `lean`. To manually change the reference level, for instance, setting `obese`
# as the reference level, use:
tse$bmi = factor(tse$bmi, levels = c("obese", "overweight", "lean"))
# You can verify the change by checking:
# levels(sample_data(tse)$bmi)
tse$region = recode(as.character(tse$nationality),
Scandinavia = "NE", UKIE = "NE", SouthEurope = "SE",
CentralEurope = "CE", EasternEurope = "EE",
.missing = "unknown")
# Discard "EE" as it contains only 1 subject
# Discard subjects with missing values of region
tse = tse[, ! tse$region %in% c("EE", "unknown")]
print(tse)
pseq <- makePhyloseqFromTreeSummarizedExperiment(tse)
pseq_genus <- phyloseq::tax_glom(pseq, taxrank = "Genus")
View(pseq_genus)
pseq_genus@sam_data
out = ancombc(
phyloseq = pseq_genus,
formula = "patient_status",
p_adj_method = "fdr",
zero_cut = 0.90, # by default prevalence filter of 10% is applied
lib_cut = 0,
group = "patient_status",
struc_zero = TRUE,
neg_lb = TRUE,
tol = 1e-5,
max_iter = 100,
conserve = TRUE,
alpha = 0.05,
global = TRUE
)
out = ancombc(
phyloseq = pseq_genus,
formula = "patient_status",
p_adj_method = "fdr",
lib_cut = 0,
group = "patient_status",
struc_zero = TRUE,
neg_lb = TRUE,
tol = 1e-5,
max_iter = 100,
conserve = TRUE,
alpha = 0.05,
global = TRUE
)
out = ancombc(
phyloseq = pseq_genus,
formula = "patient_status",
p_adj_method = "fdr",
zero_cut = 0.90, # by default prevalence filter of 10% is applied
lib_cut = 0,
group = "patient_status",
struc_zero = TRUE,
neg_lb = TRUE,
tol = 1e-5,
max_iter = 100,
conserve = TRUE,
alpha = 0.05,
global = TRUE
)
out = ancombc2(
phyloseq = pseq_genus,
formula = "patient_status",
p_adj_method = "fdr",
lib_cut = 0,
group = "patient_status",
struc_zero = TRUE,
neg_lb = TRUE,
tol = 1e-5,
max_iter = 100,
conserve = TRUE,
alpha = 0.05,
global = TRUE
)
out = ancombc(
phyloseq = pseq_genus,
formula = "patient_status",
p_adj_method = "fdr",
lib_cut = 0,
group = "patient_status",
struc_zero = TRUE,
neg_lb = TRUE,
tol = 1e-5,
max_iter = 100,
conserve = TRUE,
alpha = 0.05,
global = TRUE
)
out = ancombc(data = tse, assay_name = "counts",
tax_level = "Family", phyloseq = NULL,
formula = "age + region + bmi",
p_adj_method = "holm", prv_cut = 0.10, lib_cut = 1000,
group = "bmi", struc_zero = TRUE, neg_lb = TRUE, tol = 1e-5,
max_iter = 100, conserve = TRUE, alpha = 0.05, global = TRUE,
n_cl = 1, verbose = TRUE)
out = ancombc(
data = NULL,
assay_name = NULL,
tax_level = "Genus", phyloseq = pseq_genus,
formula = "age + region + bmi",
p_adj_method = "holm", prv_cut = 0.10, lib_cut = 1000,
group = "region", struc_zero = TRUE, neg_lb = TRUE, tol = 1e-5,
max_iter = 100, conserve = TRUE, alpha = 0.05, global = TRUE,
n_cl = 1, verbose = TRUE)
View(pseq_genus)
View(out)
library(microbiome)
library(microViz)
library(devtools)
devtools::install_github("david-barnett/microViz")
install.packages("devtools")
devtools::install_github("david-barnett/microViz")
install.packages("devtools")
devtools::install_github("david-barnett/microViz")
devtools::install_github("david-barnett/microViz")
load("~/shotgun.ps.Rdata")
saveRDS(ps.humann, "~/ps.humann.rds")
saveRDS(ps.metaphlan, "~/ps.metaphlan.rds")
ps.humann <- readRDS("~/ps.humann.rds")
ps <- readRDS("~/ps.humann.rds")
View(ps)
View(ps.metaphlan)
ps.metaphlan@tax_table
View(ps.metaphlan@tax_table)
conda install -c r rstudio
reticulate::repl_python()
View()
y
quit
conda activate python
python
install.packages(mdatools)
install.packages("mdatools:)
install.packages("mdatools")
library(mdatools)
x.cal = iris[seq(1, nrow(iris), 2), 1:4]
c.cal = iris[seq(1, nrow(iris), 2), 5]
x.cal = iris[seq(1, nrow(iris), 2), 1:4]
c.cal = iris[seq(1, nrow(iris), 2), 5] %>% as.data.frame()
library(tidyverse)
x.cal = iris[seq(1, nrow(iris), 2), 1:4]
c.cal = iris[seq(1, nrow(iris), 2), 5] %>% as.data.frame()
View(c.cal)
View(x.cal)
model = plsda(x.cal, c.cal, ncomp = 3, cv = 1)
model = plsda(x.cal, c.cal, ncomp = 3, cv = 1, info = 'IRIS data example')
x.cal = iris[seq(1, nrow(iris), 2), 1:4]
c.cal = iris[seq(1, nrow(iris), 2), 5]
model = plsda(x.cal, c.cal, ncomp = 3, cv = 1)
model = plsda(x.cal, c.cal, ncomp = 3, cv = 1, info = 'IRIS data example')
model = selectCompNum(model, 1)
summary(model)
plot(model)
View(x.cal)
plot(model, nc = 2)
plot(model)
plot(model, nc = 2)
plot(model, nc = 3, ncomp = 3)
par(mfrow = c(2, 2))
plotSpecificity(model)
plotSensitivity(model)
plotMisclassified(model)
plotMisclassified(model, nc = 2)
par(mfrow = c(1, 1))
plot(model)
model = plsda(x.cal, c.cal, ncomp = 3)
library(mixOmics)
BiocManager::install("mixOmics")
library(mixOmics)
data(liver.toxicity)
X <- liver.toxicity$gene
liver.spca <- spca(X, ncomp = 2, keepX = c(30, 30), scale = FALSE)
dose.col <- color.mixo(as.numeric(as.factor(liver.toxicity$treatment[, 3])))
View(liver.toxicity)
liver.toxicity[["treatment"]]
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Thailand/")
list_file <- list.files(pattern = "*.csv") %>%
lapply(read.csv, stringsAsFactors=F) %>%
bind_rows
library(dplyr)
library(readr)
list_file <- list.files(pattern = "*.csv") %>%
lapply(read.csv, stringsAsFactors=F) %>%
bind_rows
View(list_file)
list_file <- list.files(pattern = "*.csv") %>%
lapply(read.csv, stringsAsFactors=F) %>%
bind_cols()
View(list_file)
